package com.example.soff;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import org.w3c.dom.Text;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.Charset;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    List<String> stringList;
    ImageView image;
    TextView text;
    Spinner wrongFruitSpinner;
    String currentfruit = ""; //change this to "" later
    TextView textFruiInfo;

    // Cutting mechanism
    Button openDialog;
    TextView dialogText;
    Button reset;

    CuttingMechDialog dialog;
;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //code for the dropdown menu for cuts
//        Spinner cutSpinner = (Spinner) findViewById(R.id.cuts_spinner);
//        ArrayAdapter<String> myAdapter = new ArrayAdapter<String>(MainActivity.this,
//                android.R.layout.simple_list_item_1,getResources().getStringArray(R.array.cuts));
//        myAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
//        cutSpinner.setAdapter(myAdapter);

        LocalBroadcastManager.getInstance(this).registerReceiver(mReceiver, new IntentFilter("incomingImage"));
        LocalBroadcastManager.getInstance(this).registerReceiver(mReceiver2, new IntentFilter("incomingMessage"));

        LocalBroadcastManager.getInstance(this).registerReceiver(cReceiver, new IntentFilter("doneSlicing"));
        LocalBroadcastManager.getInstance(this).registerReceiver(cReceiver2, new IntentFilter("Reseting"));


        image = (ImageView)findViewById(R.id.picture_imageView);
        text = (TextView)findViewById(R.id.info_textview);
        textFruiInfo = (TextView) findViewById(R.id.text_fruitInfo);

        // code for the dropdown for choosing another fruit
        wrongFruitSpinner = (Spinner) findViewById(R.id.spinner_wrongfruit);
        ArrayAdapter<String> myAdapter2 = new ArrayAdapter<String>(MainActivity.this,
                android.R.layout.simple_list_item_1, getResources().getStringArray(R.array.fruits));
        myAdapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        wrongFruitSpinner.setAdapter(myAdapter2);
        // Change the fruit name when selected
        wrongFruitSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long id) {
                String selectedText = adapterView.getSelectedItem().toString();
                // Check that question "Is this the wrong fruit?" isn't changing the fruit name.
                if(i > 0){
                    Toast.makeText(MainActivity.this, selectedText, Toast.LENGTH_SHORT).show();
                    currentfruit = selectedText;
                    text.setText(selectedText);
                    SetFruitData(selectedText);
                }
            }
            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // Cutting Mechanism
        openDialog = (Button) findViewById(R.id.button);
        dialogText = (TextView) findViewById(R.id.cutDialog);
        reset = (Button) findViewById(R.id.btnReset);

        openDialog.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d("CuttingMech:", "onClick: opening Cutting Mechanism dialog");

                // Start slicing the fruit
                if(sliceFruit(v)){
                    // Open Dialog
                    dialog = new CuttingMechDialog();
                    dialog.show(getSupportFragmentManager(), "Cutting Mechanism Dialog");
                }
            }
        });

    }
    BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            //String text = intent.getStringExtra("theMessage");
            //messages.append(text + "\n");
            //Log.d(TAG,"Displaying message");
            //incomingMessages.setText(messages);

           // byte[] encodedimage = intent.getByteArrayExtra("theImage");
            String encodedimage = intent.getStringExtra("theImage");
            Log.d("Main: ",encodedimage);
            Bitmap b = stringtoimage(encodedimage);
            image.setImageBitmap(b);

        }
    };
    // Display the fruit name as text
    BroadcastReceiver mReceiver2 = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            //String text = intent.getStringExtra("theMessage");
            //messages.append(text + "\n");
            //Log.d(TAG,"Displaying message");
            //incomingMessages.setText(messages);

            // byte[] encodedimage = intent.getByteArrayExtra("theImage");
            String encodedmessage = intent.getStringExtra("theMessage");
            if(encodedmessage.equals("orange"))
            {
                Bitmap b = stringtoimage("");
                image.setImageBitmap(b);
            }
            // Set text on main screem
            Log.d("Main: ",encodedmessage);
            //set currentfruit to encoded message to store in textfile later
            currentfruit = encodedmessage;
            text.setText(encodedmessage);

            // Get the fruit Data based on the encodedmessage
            SetFruitData(encodedmessage);

            // Set fruit label spinner as visible only after the fruit has been scanned.
            wrongFruitSpinner.setVisibility(View.VISIBLE);
        }
    };
    BroadcastReceiver cReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String encodedmessage = intent.getStringExtra("sliceStatus");

            CharSequence text = "Please pick up sliced fruit";
            int duration = Toast.LENGTH_SHORT;

            Toast toast = Toast.makeText(context, text, duration);
            toast.show();

            // Change dialog
            dialog.doneSlicing();
        }
    };
    BroadcastReceiver cReceiver2 = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String encodedmessage = intent.getStringExtra("resetStatus");

            CharSequence text = "Reseting";
            int duration = Toast.LENGTH_SHORT;

            Toast toast = Toast.makeText(context, text, duration);
            toast.show();
        }
    };
    public Bitmap stringtoimage(String text)
    {
        byte[] bytes = Base64.decode(text, Base64.DEFAULT);
        Bitmap b = BitmapFactory.decodeByteArray(bytes,0,bytes.length);
        return b;
    }
    public Bitmap bytearraytoimage(byte[] bytes)
    {
        Bitmap b = BitmapFactory.decodeByteArray(bytes,0,bytes.length);
        return b;
    }
    //add code here for slicing fruit
    public boolean sliceFruit(View view) {
        Context context = getApplicationContext();
        CharSequence text;
        int duration = Toast.LENGTH_SHORT;
        Toast toast;

        if (currentfruit.equals("")) {
            text = "Fruit has not been identified";
            toast = Toast.makeText(context, text, duration);
            toast.show();
//            return false;
        }

        // Continue to cutting fruit if fruit has been identified
        String command = "cut1";
        byte[] bytes = command.toString().getBytes(Charset.defaultCharset());
        ((Startup) this.getApplicationContext()).b.write(bytes);

        text = command;
        toast = Toast.makeText(context, text, duration);
        toast.show();

        try {
            save_to_textfile(currentfruit);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }
    public void reset(View view)
    {
        Context context = getApplicationContext();
        CharSequence text;
        int duration = Toast.LENGTH_SHORT;
        Toast toast;

        // Continue to cutting fruit if fruit has been identified
        String command = "reset";
        byte[] bytes = command.toString().getBytes(Charset.defaultCharset());
        ((Startup) this.getApplicationContext()).b.write(bytes);

        text = command;
        toast = Toast.makeText(context, text, duration);
        toast.show();

        dialog.setReset();
    }
    public void scan(View view)
    {
        // Send command
        String command = "scan";
        byte[] bytes = command.toString().getBytes(Charset.defaultCharset());
        ((Startup)this.getApplicationContext()).b.write(bytes);

        Context context = getApplicationContext();
        //CharSequence text = ((Startup)this.getApplicationContext()).b.getGetDeviceName();

        CharSequence chartext = "Scanning Fruit...";
        int duration = Toast.LENGTH_SHORT;

        Toast toast = Toast.makeText(context, chartext, duration);
        toast.show();

        // Clear current fruit
        currentfruit = "";

        // Clear textViews
        text.setText("Scanning...");
        textFruiInfo.setText("");
        image.setImageResource(R.drawable.apple);

        wrongFruitSpinner.setVisibility(View.INVISIBLE);
    }
    //code for when user clicks on settings button
    public void settings(View view)
    {
        // Create an Intent to start the settings activity
        Intent settings = new Intent(this,Settings_Activity.class);
        //Start the settings activity
        startActivity(settings);

    }
    public void TestConnection(View view)
    {
        // Create an Intent to start the settings activity
        //Intent connectivity = new Intent(this,Connectivity_Activity.class);
        //Start the settings activity
        //startActivity(connectivity);
        this.finish();

    }
    public void cancel(View view)
    {
//        String s = "";
//        Bitmap b = stringtoimage(s);
//        image.setImageBitmap(b);

        Context context = getApplicationContext();
        //CharSequence text = ((Startup)this.getApplicationContext()).b.getGetDeviceName();
        CharSequence txt = "Cancel";
        int duration = Toast.LENGTH_SHORT;

        Toast toast = Toast.makeText(context, txt, duration);
        toast.show();

        // Clear current fruit
        currentfruit = "";

        // Clear textViews
        textFruiInfo.setText("");
        text.setText("Press Scan to Start");
        //image.setImageResource(0);
        image.setImageResource(R.drawable.apple);

        wrongFruitSpinner.setVisibility(View.INVISIBLE);
    }
    //saves fruit name to textfile
    public void save_to_textfile(String fruit) throws IOException {
        File path = getApplicationContext().getFilesDir();
        File file = new File(path,"fruits.txt");
        //FileOutputStream stream = new FileOutputStream(file);
        FileOutputStream stream = openFileOutput("fruits.txt",MODE_APPEND);
        try{
            stream.write(fruit.getBytes());
            stream.write(" ".getBytes());
            //stream.write("".getBytes());

            LocalDate localDate = LocalDate.now();

            stream.write((DateTimeFormatter.ofPattern("yyyy/MM/dd").format(localDate).getBytes()));
            stream.write("\n".getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        } finally{
            stream.close();
        }
        Log.d("Main Activity:", "Writing fruit name to file");
        //currentfruit = "";
    }
    //

    // Get all the information of the fruit
    public void SetFruitData(String fruit){
        stringList = new ArrayList<String>();
        DatabaseCommunication databaseCommunication = new DatabaseCommunication();
        stringList = databaseCommunication.runQuery(fruit);

        //
        String data = "";
        for(String str : stringList){
            data += str + "\n";
        }

//        Context context = getApplicationContext();
//        CharSequence text = "Changed fruit to " + fruit;
//        int duration = Toast.LENGTH_SHORT;
//
//        Toast toast = Toast.makeText(context, text, duration);
//        toast.show();

        CharSequence encodedmessage = data;
        textFruiInfo.setText(encodedmessage);

    }
    public void checkRipeness(View view){
        // Create an Intent to start the ripeness activity
        Intent intent = new Intent(MainActivity.this, activity_ripeness.class);
        //Start the ripeness activity
        startActivity(intent);

//        String command = "checkripe";
//        byte[] bytes = command.toString().getBytes(Charset.defaultCharset());
//        ((Startup)this.getApplicationContext()).b.write(bytes);
//
//        Context context = getApplicationContext();
//        //CharSequence text = ((Startup)this.getApplicationContext()).b.getGetDeviceName();
//        CharSequence text = "Checking ripeness";
//        int duration = Toast.LENGTH_SHORT;
//
//        Toast toast = Toast.makeText(context, text, duration);
//        toast.show();
    }

}
